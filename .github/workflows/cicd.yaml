name: CI/CD Pipeline

on:
  push:
    branches: ["release"]
  pull_request:
    branches: ["release"]
env:
  VPS_IP: ${{ secrets.VPS_IP }}
  VPS_USER: ${{ secrets.VPS_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DEPLOY_PATH: /opt/techstore

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -Dspring.profiles.active=dev

      - name: Create SSH key
        run: mkdir -p ~/.ssh

      - name: Store SSH key
        run: echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

      - name: Add host key
        run: ssh-keyscan -H ${{ env.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Prepare deployment on VPS
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_IP }} "
            mkdir -p ${{ env.DEPLOY_PATH }}
            mkdir -p ${{ env.DEPLOY_PATH }}/target
          "
      - name: Copy files to VPS
        run: |
          # Copy JAR file
          scp target/*.jar ${{ env.VPS_USER }}@VPS_IP:${{ env.DEPLOY_PATH }}/target/
          # Copy docker-compose.yml
          scp docker-compose.yml ${{ env.VPS_USER }}@VPS_IP:${{ env.DEPLOY_PATH }}/
          # Copy Dockerfile
          scp Dockerfile ${{ env.VPS_USER }}@VPS_IP:${{ env.DEPLOY_PATH }}/

      - name: Deploy on VPS
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_IP }} "
            cd ${{ env.DEPLOY_PATH }}
            
            # Stop running containers
            docker-compose down || true
            
            # Remove old images
            docker-compose rm -f || true
          
            # Build and start new containers
            docker-compose up --build -d
            
            # Remove unused images (optional)
            docker image prune -f
          "